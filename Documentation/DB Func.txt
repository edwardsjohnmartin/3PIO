CREATE OR REPLACE FUNCTION sproc_write_question_update_student_answer(question_id integer, exam_id integer, user_id integer, contents text, completion_status_id integer) RETURNS void
    LANGUAGE sql SECURITY DEFINER
    AS $$

INSERT INTO students_answers_to_questions (question_id, exam_id, user_id, contents, completion_status_id, date_updated, score) 
VALUES 
(
    sproc_write_question_update_student_answer.question_id, 
    sproc_write_question_update_student_answer.exam_id, 
    sproc_write_question_update_student_answer.user_id, 
    sproc_write_question_update_student_answer.contents,
    sproc_write_question_update_student_answer.completion_status_id,
    current_timestamp,
    CASE 
    	WHEN sproc_write_question_update_student_answer.completion_status_id = 1 
    		THEN 1
    		ELSE 0
    END
)
ON CONFLICT ON CONSTRAINT user_to_question_to_exam_uq
DO 
	UPDATE 
    	SET contents = sproc_write_question_update_student_answer.contents,
        	date_updated = current_timestamp,
            completion_status_id = sproc_write_question_update_student_answer.completion_status_id,
            score = (
            SELECT CASE 
        		WHEN sproc_write_question_update_student_answer.completion_status_id = 1
            		THEN 1
                	ELSE 0
        	END)
		WHERE students_answers_to_questions.user_id = sproc_write_question_update_student_answer.user_id 
    	AND students_answers_to_questions.question_id = sproc_write_question_update_student_answer.question_id
    	AND students_answers_to_questions.exam_id = sproc_write_question_update_student_answer.exam_id;

$$;

ALTER FUNCTION public.sproc_write_question_update_student_answer(question_id integer, exam_id integer, user_id integer, contents text, completion_status_id integer) OWNER TO postgres;

CREATE OR REPLACE FUNCTION public.sproc_read_exam_grades(
	exam_id integer)
    RETURNS TABLE(student integer, questions integer[], scores real[]) 
    LANGUAGE 'sql'

    COST 100
    VOLATILE SECURITY DEFINER 
    ROWS 1000
AS $BODY$

SELECT satq.user_id, array_agg(satq.question_id), array_agg(satq.score)
FROM students_answers_to_questions AS satq
WHERE satq.exam_id = sproc_read_exam_grades.exam_id
GROUP BY satq.user_id
ORDER BY satq.user_id

$BODY$;

ALTER FUNCTION public.sproc_read_exam_grades(integer)
    OWNER TO postgres;