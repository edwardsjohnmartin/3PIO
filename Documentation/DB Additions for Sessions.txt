CREATE SEQUENCE public.sessions_id_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.sessions_id_seq
    OWNER TO postgres;

CREATE TABLE public.sessions
(
    id integer NOT NULL DEFAULT nextval('sessions_id_seq'::regclass),
    user_id integer NOT NULL,
    securable_id integer NOT NULL,
    start_time timestamp without time zone NOT NULL,
    end_time timestamp without time zone NOT NULL,
    mouse_clicks integer NOT NULL DEFAULT 0,
    key_presses integer NOT NULL DEFAULT 0,
    times_ran integer NOT NULL DEFAULT 0,
    CONSTRAINT sessions_pkey PRIMARY KEY (id),
    CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT sessions_securable_id_fkey FOREIGN KEY (securable_id)
        REFERENCES public.securables (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
WITH (
    OIDS = FALSE
)
TABLESPACE pg_default;

CREATE OR REPLACE FUNCTION public.sproc_write_session(
	user_id integer,
	securable_id integer,
	activity_id integer,
	start_time timestamp without time zone,
	end_time timestamp without time zone,
	mouse_clicks integer,
	key_presses integer,
	times_ran integer)
    RETURNS void
    LANGUAGE 'sql'

    COST 100
    VOLATILE SECURITY DEFINER 
AS $BODY$

INSERT INTO sessions AS s 
(user_id, securable_id, activity_id, start_time, end_time, mouse_clicks, key_presses, times_ran)
VALUES (sproc_write_session.user_id,
        sproc_write_session.securable_id,
        sproc_write_session.activity_id,
        sproc_write_session.start_time,
        sproc_write_session.end_time,
        sproc_write_session.mouse_clicks,
        sproc_write_session.key_presses,
        sproc_write_session.times_ran);

$BODY$;

ALTER FUNCTION public.sproc_write_session(integer, integer, integer, timestamp without time zone, timestamp without time zone, integer, integer, integer)
    OWNER TO postgres;